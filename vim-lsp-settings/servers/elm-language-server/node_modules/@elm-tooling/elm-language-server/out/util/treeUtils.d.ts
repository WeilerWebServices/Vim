import { Position } from "vscode-languageserver";
import { SyntaxNode, Tree } from "web-tree-sitter";
import { IImport, IImports } from "../imports";
import { IForest } from "../forest";
import { IElmWorkspace } from "src/elmWorkspace";
export declare type NodeType = "Function" | "FunctionParameter" | "TypeAlias" | "Type" | "Operator" | "Module" | "CasePattern" | "AnonymousFunctionParameter" | "UnionConstructor" | "FieldType" | "TypeVariable" | "Port";
export interface IExposing {
    name: string;
    syntaxNode: SyntaxNode;
    type: NodeType;
    exposedUnionConstructors?: {
        name: string;
        syntaxNode: SyntaxNode;
    }[];
}
export declare function flatMap<T, U>(array: T[], callback: (value: T, index: number, array: T[]) => U[]): U[];
export declare class TreeUtils {
    static getModuleNameNode(tree: Tree): SyntaxNode | undefined;
    static getModuleExposingListNodes(tree: Tree): SyntaxNode[];
    static getModuleNameAndExposing(tree: Tree): {
        moduleName: string;
        exposing: IExposing[];
    } | undefined;
    static findFirstNamedChildOfType(type: string, node: SyntaxNode): SyntaxNode | undefined;
    static findAllNamedChildrenOfType(type: string | string[], node: SyntaxNode): SyntaxNode[] | undefined;
    static findExposedFunctionNode(node: SyntaxNode, functionName: string): SyntaxNode | undefined;
    static isExposedFunction(tree: Tree, functionName: string): boolean;
    static findExposedTypeOrTypeAliasNode(node: SyntaxNode, typeName: string): SyntaxNode | undefined;
    static isExposedTypeOrTypeAlias(tree: Tree, typeName: string): boolean;
    static findUnionConstructor(tree: Tree, unionConstructorName: string): SyntaxNode | undefined;
    static findUnionConstructorCalls(tree: Tree, unionConstructorName: string): SyntaxNode[] | undefined;
    static findLetFunctionNodeDefinition(syntaxNode: SyntaxNode, functionName: string): SyntaxNode | undefined;
    static findFunction(syntaxNode: SyntaxNode, functionName: string, onlySearchTopLevel?: boolean): SyntaxNode | undefined;
    static findPort(tree: Tree, portName: string): SyntaxNode | undefined;
    static findOperator(tree: Tree, operatorName: string): SyntaxNode | undefined;
    static findTypeDeclaration(tree: Tree, typeName: string): SyntaxNode | undefined;
    static findModuleDeclaration(tree: Tree): SyntaxNode | undefined;
    static findTypeAliasDeclaration(tree: Tree, typeAliasName: string): SyntaxNode | undefined;
    static findAllTopLevelFunctionDeclarations(tree: Tree): SyntaxNode[] | undefined;
    static findAllTopLevelFunctionDeclarationsWithoutTypeAnnotation(tree: Tree): SyntaxNode[] | undefined;
    static findAllTypeOrTypeAliasCalls(tree: Tree): SyntaxNode[] | undefined;
    static getFunctionNameNodeFromDefinition(node: SyntaxNode): SyntaxNode | undefined;
    static getTypeOrTypeAliasNameNodeFromDefinition(node: SyntaxNode): SyntaxNode | undefined;
    static findTypeOrTypeAliasCalls(tree: Tree, typeOrTypeAliasName: string): SyntaxNode[] | undefined;
    static findAllTypeDeclarations(tree: Tree): SyntaxNode[] | undefined;
    static findAllTypeAliasDeclarations(tree: Tree): SyntaxNode[] | undefined;
    static findUppercaseQidNode(tree: Tree, nodeAtPosition: SyntaxNode): {
        node: SyntaxNode;
        nodeType: NodeType;
    } | undefined;
    static findDefinitionNodeByReferencingNode(nodeAtPosition: SyntaxNode, uri: string, tree: Tree, elmWorkspace: IElmWorkspace): {
        node: SyntaxNode;
        uri: string;
        nodeType: NodeType;
    } | undefined;
    static findDefinitionNodeByReferencingNodeShallow(nodeAtPosition: SyntaxNode, uri: string, tree: Tree, elmWorkspace: IElmWorkspace): {
        node: SyntaxNode;
        uri: string;
        nodeType: NodeType;
    } | undefined;
    static findTypeAliasTypeVariable(nodeAtPosition: SyntaxNode, nodeAtPositionText: string): SyntaxNode | undefined;
    static findFunctionParameterDefinition(node: SyntaxNode, functionParameterName: string): SyntaxNode | undefined;
    static findAnonymousFunctionParameterDefinition(node: SyntaxNode, functionParameterName: string): SyntaxNode | undefined;
    static findCaseOfParameterDefinition(node: SyntaxNode, caseParameterName: string): SyntaxNode | undefined;
    static findImportFromImportList(uri: string, nodeName: string, type: NodeType, imports: IImports): IImport | undefined;
    static findImportClauseByName(tree: Tree, moduleName: string): SyntaxNode | undefined;
    static getAllImportedValues(forest: IForest, tree: Tree): {
        module: string;
        value: string;
    }[];
    static findImportNameNode(tree: Tree, moduleName: string): SyntaxNode | undefined;
    static getTypeOrTypeAliasOfFunctionParameter(node: SyntaxNode | undefined): SyntaxNode | undefined;
    static getReturnTypeOrTypeAliasOfFunctionDefinition(node: SyntaxNode | undefined): SyntaxNode | undefined;
    static getTypeOrTypeAliasOfFunctionRecordParameter(node: SyntaxNode | undefined, tree: Tree, uri: string, elmWorkspace: IElmWorkspace): SyntaxNode | undefined;
    static getTypeAliasOfRecordField(node: SyntaxNode | undefined, tree: Tree, uri: string, elmWorkspace: IElmWorkspace): {
        node: SyntaxNode;
        uri: string;
    } | undefined;
    static getTypeAliasOfCase(type: SyntaxNode | undefined, tree: Tree, uri: string, elmWorkspace: IElmWorkspace): {
        node: SyntaxNode;
        uri: string;
    } | undefined;
    static getTypeAliasOfRecord(node: SyntaxNode | undefined, tree: Tree, uri: string, elmWorkspace: IElmWorkspace): {
        node: SyntaxNode;
        uri: string;
    } | undefined;
    static getAllFieldsFromTypeAlias(node: SyntaxNode | undefined): {
        field: string;
        type: string;
    }[] | undefined;
    static descendantsOfType(node: SyntaxNode, type: string): SyntaxNode[];
    static getNamedDescendantForPosition(node: SyntaxNode, position: Position): SyntaxNode;
    static findPreviousNode(node: SyntaxNode, position: Position): SyntaxNode | undefined;
    static getNamedDescendantForLineBeforePosition(node: SyntaxNode, position: Position): SyntaxNode;
    static getNamedDescendantForLineAfterPosition(node: SyntaxNode, position: Position): SyntaxNode;
    static findParentOfType(typeToLookFor: string, node: SyntaxNode, topLevel?: boolean): SyntaxNode | undefined;
    static getLastImportNode(tree: Tree): SyntaxNode | undefined;
    static isReferenceFullyQualified(node: SyntaxNode): boolean;
    static getTypeAnnotation(valueDeclaration?: SyntaxNode): SyntaxNode | undefined;
    /**
     * This gets a list of all ancestors of a type
     * in order from the closest declaration up to the top level declaration
     */
    static getAllAncestorsOfType(type: string, node: SyntaxNode): SyntaxNode[];
    static getQualifierForName(tree: Tree, uri: string, module: string, name: string, imports: IImports): string | undefined;
    private static findExposedTopLevelFunctions;
    private static findExposedTopLevelPorts;
    static findAllImportClauseNodes(tree: Tree): SyntaxNode[] | undefined;
    static isIdentifier(node: SyntaxNode): boolean;
    static isImport(node: SyntaxNode): boolean;
    static nextNode(node: SyntaxNode): SyntaxNode | undefined;
    private static findFieldReference;
}
