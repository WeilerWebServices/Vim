"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecordFieldReferenceTable = void 0;
class RecordFieldReferenceTable {
    constructor(refsByField) {
        this._frozen = false;
        this.refsByField = refsByField !== null && refsByField !== void 0 ? refsByField : new Map();
    }
    get frozen() {
        return this._frozen;
    }
    static fromExpressions(fieldExpressions) {
        const fieldRefs = new Map();
        fieldExpressions.forEach((field) => {
            fieldRefs.set(field.name, [field]);
        });
        return new RecordFieldReferenceTable(fieldRefs);
    }
    get(field) {
        var _a;
        return (_a = this.refsByField.get(field)) !== null && _a !== void 0 ? _a : [];
    }
    addAll(other) {
        if (this._frozen || other.refsByField === this.refsByField) {
            return;
        }
        other.refsByField.forEach((refs, field) => {
            var _a;
            let set = this.refsByField.get(field);
            if (!set) {
                this.refsByField.set(field, []);
                set = (_a = this.refsByField.get(field)) !== null && _a !== void 0 ? _a : [];
            }
            set.push(...refs);
        });
    }
    plus(other) {
        const newRefs = new Map();
        this.refsByField.forEach((set, field) => {
            var _a;
            const otherSet = (_a = other.refsByField.get(field)) !== null && _a !== void 0 ? _a : [];
            newRefs.set(field, [...set, ...otherSet]);
        });
        other.refsByField.forEach((set, field) => {
            if (!newRefs.get(field)) {
                newRefs.set(field, set);
            }
        });
        return new RecordFieldReferenceTable(newRefs);
    }
    isEmpty() {
        return this.refsByField.size === 0;
    }
    freeze() {
        this._frozen = true;
    }
}
exports.RecordFieldReferenceTable = RecordFieldReferenceTable;
//# sourceMappingURL=recordFieldReferenceTable.js.map