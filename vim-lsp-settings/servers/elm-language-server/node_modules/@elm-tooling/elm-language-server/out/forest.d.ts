import { SyntaxNode, Tree } from "web-tree-sitter";
import { IExposing } from "./util/treeUtils";
export interface ITreeContainer {
    uri: string;
    writeable: boolean;
    referenced: boolean;
    moduleName?: string;
    maintainerAndPackageName?: string;
    exposing?: IExposing[];
    tree: Tree;
    isExposed: boolean;
}
export interface IForest {
    treeIndex: ITreeContainer[];
    getTree(uri: string): Tree | undefined;
    getExposingByModuleName(moduleName: string): IExposing[] | undefined;
    getTreeByModuleName(moduleName: string): Tree | undefined;
    getByModuleName(moduleName: string): ITreeContainer | undefined;
    getByUri(uri: string): ITreeContainer | undefined;
    setTree(uri: string, writeable: boolean, referenced: boolean, tree: Tree, isExposed: boolean, packageName?: string): void;
    removeTree(uri: string): void;
    getUriOfNode(node: SyntaxNode): string | undefined;
}
export declare class Forest implements IForest {
    treeIndex: ITreeContainer[];
    getTree(uri: string): Tree | undefined;
    getExposingByModuleName(moduleName: string): IExposing[] | undefined;
    getTreeByModuleName(moduleName: string): Tree | undefined;
    getByModuleName(moduleName: string): ITreeContainer | undefined;
    getByUri(uri: string): ITreeContainer | undefined;
    setTree(uri: string, writeable: boolean, referenced: boolean, tree: Tree, isExposed: boolean, maintainerAndPackageName?: string): void;
    removeTree(uri: string): void;
    getUriOfNode(node: SyntaxNode): string | undefined;
}
