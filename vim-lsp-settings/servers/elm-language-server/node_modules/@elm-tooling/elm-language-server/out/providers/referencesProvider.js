"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReferencesProvider = void 0;
const tsyringe_1 = require("tsyringe");
const vscode_languageserver_1 = require("vscode-languageserver");
const vscode_uri_1 = require("vscode-uri");
const elmWorkspaceMatcher_1 = require("../util/elmWorkspaceMatcher");
const references_1 = require("../util/references");
const treeUtils_1 = require("../util/treeUtils");
class ReferencesProvider {
    constructor() {
        this.handleReferencesRequest = (params, elmWorkspace) => {
            this.connection.console.info(`References were requested`);
            const forest = elmWorkspace.getForest();
            const tree = forest.getTree(params.textDocument.uri);
            if (tree) {
                const nodeAtPosition = treeUtils_1.TreeUtils.getNamedDescendantForPosition(tree.rootNode, params.position);
                const definitionNode = treeUtils_1.TreeUtils.findDefinitionNodeByReferencingNode(nodeAtPosition, params.textDocument.uri, tree, elmWorkspace);
                const references = references_1.References.find(definitionNode, elmWorkspace);
                if (references) {
                    return references.map((a) => vscode_languageserver_1.Location.create(a.uri, vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(a.node.startPosition.row, a.node.startPosition.column), vscode_languageserver_1.Position.create(a.node.endPosition.row, a.node.endPosition.column))));
                }
            }
            return undefined;
        };
        this.connection = tsyringe_1.container.resolve("Connection");
        this.connection.onReferences(new elmWorkspaceMatcher_1.ElmWorkspaceMatcher((param) => vscode_uri_1.URI.parse(param.textDocument.uri)).handlerForWorkspace(this.handleReferencesRequest));
    }
}
exports.ReferencesProvider = ReferencesProvider;
//# sourceMappingURL=referencesProvider.js.map