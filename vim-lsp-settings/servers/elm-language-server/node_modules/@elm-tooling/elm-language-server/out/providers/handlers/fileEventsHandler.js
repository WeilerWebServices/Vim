"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileEventsHandler = void 0;
const path_1 = require("path");
const protocol_1 = require("../../protocol");
const elmWorkspaceMatcher_1 = require("../../util/elmWorkspaceMatcher");
const refactorEditUtils_1 = require("../../util/refactorEditUtils");
const tsyringe_1 = require("tsyringe");
const vscode_uri_1 = require("vscode-uri");
const renameUtils_1 = require("../../util/renameUtils");
const renameProvider_1 = require("../renameProvider");
const treeUtils_1 = require("../../util/treeUtils");
const positionUtil_1 = require("../../positionUtil");
class FileEventsHandler {
    constructor() {
        this.connection = tsyringe_1.container.resolve("Connection");
        this.connection.onRequest(protocol_1.OnDidCreateFilesRequest, (params) => __awaiter(this, void 0, void 0, function* () {
            for (const file of params.files) {
                yield new elmWorkspaceMatcher_1.ElmWorkspaceMatcher((file) => file).handlerForWorkspace(this.onDidCreateFile.bind(this))(vscode_uri_1.URI.revive(file));
            }
        }));
        this.connection.onRequest(protocol_1.OnDidRenameFilesRequest, (params) => __awaiter(this, void 0, void 0, function* () {
            for (const { oldUri, newUri } of params.files) {
                yield new elmWorkspaceMatcher_1.ElmWorkspaceMatcher((file) => file).handlerForWorkspace(this.onDidRenameFile.bind(this, vscode_uri_1.URI.revive(oldUri)))(vscode_uri_1.URI.revive(newUri));
            }
        }));
    }
    onDidCreateFile(file, elmWorkspace) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!file.toString().endsWith(".elm")) {
                return;
            }
            const moduleName = this.getModuleNameFromFile(file, elmWorkspace);
            if (moduleName) {
                const addModuleDefinitionEdit = refactorEditUtils_1.RefactorEditUtils.addModuleDeclaration(moduleName);
                yield this.connection.workspace.applyEdit({
                    changes: { [file.toString()]: [addModuleDefinitionEdit] },
                });
            }
        });
    }
    onDidRenameFile(oldFile, newFile, elmWorkspace) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!newFile.toString().endsWith(".elm")) {
                return;
            }
            const tree = (_a = elmWorkspace.getForest().getByUri(oldFile.toString())) === null || _a === void 0 ? void 0 : _a.tree;
            const moduleName = this.getModuleNameFromFile(newFile, elmWorkspace);
            const moduleNameNode = tree ? treeUtils_1.TreeUtils.getModuleNameNode(tree) : undefined;
            if (moduleName && moduleNameNode && tree) {
                const moduleNodePosition = positionUtil_1.PositionUtil.FROM_TS_POSITION(moduleNameNode.endPosition).toVSPosition();
                const affectedNodes = renameUtils_1.RenameUtils.getRenameAffectedNodes(elmWorkspace, newFile.toString(), moduleNodePosition);
                const [edits, textDocumentEdits] = renameProvider_1.RenameProvider.getRenameEdits(affectedNodes, moduleName);
                yield this.connection.workspace.applyEdit({
                    changes: edits,
                    documentChanges: textDocumentEdits,
                });
            }
        });
    }
    getModuleNameFromFile(file, elmWorkspace) {
        const sourceDir = elmWorkspace.getPath(file);
        // The file is not in a source dir (shouldn't happen)
        if (!sourceDir) {
            return;
        }
        const relativePath = vscode_uri_1.URI.file(path_1.relative(sourceDir, file.fsPath)).path.slice(1);
        // Remove extension and convert to module name
        return relativePath.split(".").slice(0, -1).join(".").split("/").join(".");
    }
}
exports.FileEventsHandler = FileEventsHandler;
//# sourceMappingURL=fileEventsHandler.js.map