"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Forest = void 0;
const treeUtils_1 = require("./util/treeUtils");
class Forest {
    constructor() {
        this.treeIndex = [];
    }
    getTree(uri) {
        const result = this.treeIndex.find((tree) => tree.uri === uri);
        return result && result.tree;
    }
    getExposingByModuleName(moduleName) {
        const result = this.treeIndex
            .filter((tree) => tree.moduleName === moduleName)
            .sort((x, y) => {
            return x.isExposed === y.isExposed ? 0 : x.isExposed ? -1 : 1;
        })[0];
        return result && result.exposing;
    }
    getTreeByModuleName(moduleName) {
        const result = this.treeIndex.find((tree) => tree.moduleName === moduleName);
        return result && result.tree;
    }
    getByModuleName(moduleName) {
        return this.treeIndex
            .filter((tree) => tree.moduleName === moduleName)
            .sort((x, y) => {
            return x.isExposed === y.isExposed ? 0 : x.isExposed ? -1 : 1;
        })[0];
    }
    getByUri(uri) {
        return this.treeIndex.find((tree) => tree.uri === uri);
    }
    setTree(uri, writeable, referenced, tree, isExposed, maintainerAndPackageName) {
        const moduleResult = treeUtils_1.TreeUtils.getModuleNameAndExposing(tree);
        let moduleName;
        let exposing;
        if (moduleResult) {
            ({ moduleName, exposing } = moduleResult);
        }
        const existingTree = this.treeIndex.findIndex((a) => a.uri === uri);
        const treeContainer = {
            exposing,
            maintainerAndPackageName,
            moduleName,
            referenced,
            tree,
            uri,
            writeable,
            isExposed,
        };
        if (existingTree === -1) {
            this.treeIndex.push(treeContainer);
        }
        else {
            this.treeIndex[existingTree] = treeContainer;
        }
    }
    removeTree(uri) {
        // Not sure this is the best way to do this...
        this.treeIndex = this.treeIndex.filter((tree) => tree.uri !== uri);
    }
    getUriOfNode(node) {
        var _a;
        return (_a = this.treeIndex.find((treeContainer) => treeContainer.tree.rootNode.id === node.tree.rootNode.id)) === null || _a === void 0 ? void 0 : _a.uri;
    }
}
exports.Forest = Forest;
//# sourceMappingURL=forest.js.map