"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
const globby_1 = __importDefault(require("globby"));
const path_1 = __importDefault(require("path"));
const tsyringe_1 = require("tsyringe");
const vscode_uri_1 = require("vscode-uri");
const capabilityCalculator_1 = require("./capabilityCalculator");
const elmWorkspace_1 = require("./elmWorkspace");
const providers_1 = require("./providers");
class Server {
    constructor(params, progress) {
        this.progress = progress;
        this.connection = tsyringe_1.container.resolve("Connection");
        const uri = this.getWorkspaceUri(params);
        if (uri) {
            // Cleanup the path on windows, as globby does not like backslashes
            const globUri = uri.fsPath.replace(/\\/g, "/");
            const elmJsonGlob = `${globUri}/**/elm.json`;
            const elmJsons = globby_1.default.sync([elmJsonGlob, "!**/node_modules/**", "!**/elm-stuff/**"], { suppressErrors: true });
            if (elmJsons.length > 0) {
                this.connection.console.info(`Found ${elmJsons.length} elm.json files for workspace ${globUri}`);
                const listOfElmJsonFolders = elmJsons.map((a) => this.getElmJsonFolder(a));
                const topLevelElmJsons = this.findTopLevelFolders(listOfElmJsonFolders);
                this.connection.console.info(`Found ${topLevelElmJsons.size} unique elmWorkspaces for workspace ${globUri}`);
                const elmWorkspaces = [];
                topLevelElmJsons.forEach((elmWorkspace) => {
                    elmWorkspaces.push(new elmWorkspace_1.ElmWorkspace(elmWorkspace));
                });
                tsyringe_1.container.register("ElmWorkspaces", {
                    useValue: elmWorkspaces,
                });
            }
            else {
                this.connection.window.showErrorMessage("No elm.json found. Please run 'elm init' in your main directory.");
                this.connection.console.info(`No elm.json found`);
            }
        }
        else {
            this.connection.console.info(`No workspace was setup by the client`);
        }
    }
    get capabilities() {
        const calculator = tsyringe_1.container.resolve(capabilityCalculator_1.CapabilityCalculator);
        return {
            capabilities: calculator.capabilities,
        };
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.progress.begin("Indexing Elm", 0);
            const elmWorkspaces = tsyringe_1.container.resolve("ElmWorkspaces");
            yield Promise.all(elmWorkspaces
                .map((ws) => ({ ws, indexedPercent: 0 }))
                .map((indexingWs, _, all) => indexingWs.ws.init((percent) => {
                // update progress for this workspace
                indexingWs.indexedPercent = percent;
                // report average progress across all workspaces
                const avgIndexed = all.reduce((sum, { indexedPercent }) => sum + indexedPercent, 0) /
                    all.length;
                this.progress.report(avgIndexed, `${Math.round(avgIndexed)}%`);
            })));
            this.progress.done();
        });
    }
    registerInitializedProviders() {
        return __awaiter(this, void 0, void 0, function* () {
            const settings = tsyringe_1.container.resolve("Settings");
            // We can now query the client for up to date settings
            settings.initFinished();
            // these register calls rely on settings having been setup
            tsyringe_1.container.register(providers_1.DocumentFormattingProvider, {
                useValue: new providers_1.DocumentFormattingProvider(),
            });
            tsyringe_1.container.register(providers_1.ElmMakeDiagnostics, {
                useValue: new providers_1.ElmMakeDiagnostics(),
            });
            tsyringe_1.container.register(providers_1.TypeInferenceDiagnostics, {
                useValue: new providers_1.TypeInferenceDiagnostics(),
            });
            const clientSettings = yield settings.getClientSettings();
            tsyringe_1.container.register("ClientSettings", {
                useValue: clientSettings,
            });
            tsyringe_1.container.register(providers_1.ElmAnalyseDiagnostics, {
                useValue: clientSettings.elmAnalyseTrigger !== "never"
                    ? new providers_1.ElmAnalyseDiagnostics()
                    : null,
            });
            tsyringe_1.container.register(providers_1.ASTProvider, {
                useValue: new providers_1.ASTProvider(),
            });
            new providers_1.DiagnosticsProvider();
            new providers_1.CodeActionProvider();
            new providers_1.FoldingRangeProvider();
            new providers_1.CompletionProvider();
            new providers_1.HoverProvider();
            new providers_1.DefinitionProvider();
            new providers_1.ReferencesProvider();
            new providers_1.DocumentSymbolProvider();
            new providers_1.WorkspaceSymbolProvider();
            new providers_1.CodeLensProvider();
            new providers_1.SelectionRangeProvider();
            new providers_1.RenameProvider();
        });
    }
    getElmJsonFolder(uri) {
        return vscode_uri_1.URI.file(path_1.default.dirname(uri));
    }
    findTopLevelFolders(listOfElmJsonFolders) {
        const result = new Map();
        listOfElmJsonFolders.forEach((uri) => {
            result.set(uri.fsPath, uri);
        });
        listOfElmJsonFolders.forEach((parentUri) => {
            listOfElmJsonFolders.forEach((childUri) => {
                const parentPath = parentUri.fsPath + path_1.default.sep;
                const childPath = childUri.fsPath + path_1.default.sep;
                if (parentPath !== childPath && childPath.startsWith(parentPath)) {
                    result.delete(childUri.fsPath);
                }
            });
        });
        return result;
    }
    getWorkspaceUri(params) {
        if (params.rootUri) {
            return vscode_uri_1.URI.parse(params.rootUri);
        }
        else if (params.rootPath) {
            return vscode_uri_1.URI.file(params.rootPath);
        }
        else {
            return null;
        }
    }
}
exports.Server = Server;
//# sourceMappingURL=server.js.map